#! should i add the self preservation part to the api gateway as well or als to all the other microservices

server.port=8081




#This sets the name of your application. Eureka will use this name to register your service. In this case, your API Gateway will be registered with the name api-gateway.
spring.application.name=api-gateway
#This specifies the URL of the Eureka server where your application will register itself. Replace <EUREKA_SERVER_HOST> and <EUREKA_SERVER_PORT> with the actual host and port of your Eureka server.
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
#This property indicates whether your application should register itself with the Eureka server. Setting this to true means your API Gateway will be registered as a service in Eureka.
eureka.client.register-with-eureka=true
#This property indicates whether your application should fetch the registry information from the Eureka server. Setting this to true means your API Gateway will be able to discover other services registered with Eureka.
eureka.client.fetch-registry=true


#TODO : Configure api gateway routes here



#spring cloud gateway routes

spring.cloud.gateway.routes[0].id=auth-service
spring.cloud.gateway.routes[0].uri=lb://fyp-university
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/v1/auth/**

logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.web.reactive.function.client=DEBUG
