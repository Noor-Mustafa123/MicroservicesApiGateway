#! should i add the self preservation part to the api gateway as well or als to all the other microservices

#This property is used to enable or disable Eureka's self-preservation mode. In self-preservation mode, if Eureka server doesn't receive a certain amount of renewals from its registered instances, it stops expiring instances out of its registry to protect against network partitions.
# When this property is set to false, self-preservation mode is disabled, meaning Eureka server will remove instances when it doesn't receive renewals, regardless of the percentage of renewals received.
eureka.server.enableSelfPreservation=false
#This property sets the interval with which the Eureka client will send heartbeats to the Eureka server to indicate that it is still alive. The value is in seconds. If the server doesn't receive a heartbeat from an instance for a period of time, it will unregister the instance. The default value is 30 seconds.
eureka.instance.lease-renewal-interval-in-seconds=30

#This sets the name of your application. Eureka will use this name to register your service. In this case, your API Gateway will be registered with the name api-gateway.
spring.application.name=api-gateway
#This specifies the URL of the Eureka server where your application will register itself. Replace <EUREKA_SERVER_HOST> and <EUREKA_SERVER_PORT> with the actual host and port of your Eureka server.
erueka.client.service-url.defaultZone=http://localhost:8761/eureka
#This property indicates whether your application should register itself with the Eureka server. Setting this to true means your API Gateway will be registered as a service in Eureka.
eureka.client.register-with-eureka=true
#This property indicates whether your application should fetch the registry information from the Eureka server. Setting this to true means your API Gateway will be able to discover other services registered with Eureka.
eureka.client.fetch-registry=true


#TODO : Configure api gateway routes here


#spring cloud gateway routes


